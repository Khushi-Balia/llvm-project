//===----------------------------------------------------------------------===//
//
// This file contains the PRU implementation of the TargetRegisterInfo class.
//
//===----------------------------------------------------------------------===//

#include "PRURegisterInfo.h"
#include "PRU.h"
#include "PRUSubtarget.h"
#include "PRUMachineFunctionInfo.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Type.h"
#include "llvm/Support/CommandLine.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

#define GET_REGINFO_TARGET_DESC
#include "PRUGenRegisterInfo.inc"

namespace llvm {

PRURegisterInfo::PRURegisterInfo()
    : PRUGenRegisterInfo(0) {}

MCPhysReg const *
PRURegisterInfo::getCalleeSavedRegs(MachineFunction const *MF) const {
  const PRUSubtarget &STI = MF->getSubtarget<PRUSubtarget>();
  // This constant was generated by tablegen from PRUCallingConv.td
  return CSR_LP32_SaveList;
}

uint32_t const *
PRURegisterInfo::getCallPreservedMask(MachineFunction const &MF,
                                           CallingConv::ID CC) const {
  const PRUSubtarget &STI = MF.getSubtarget<PRUSubtarget>();                                         
  return CSR_LP32_RegMask;
}

BitVector
PRURegisterInfo::getReservedRegs(MachineFunction const &MF) const {
  constexpr uint16_t ReservedCPURegs[] = {PRU::r2, PRU::r4,
                                          PRU::r14};
  BitVector Reserved(getNumRegs());
  for (auto const reg : ReservedCPURegs) {
    Reserved.set(reg);
  }

  return Reserved;
}

bool PRURegisterInfo::eliminateFrameIndex(MachineBasicBlock::iterator II,
                                               int SPAdj, unsigned FIOperandNum,
                                               RegScavenger *RS) const {

  assert(SPAdj == 0 && "Unexpected SPAdj value");


  MachineInstr &MI = *II;
  DebugLoc dl = MI.getDebugLoc();
  MachineBasicBlock &MBB = *MI.getParent();
  const MachineFunction &MF = *MBB.getParent();
  const PRUTargetMachine &TM = (const PRUTargetMachine &)MF.getTarget();
  const TargetInstrInfo &TII = *MF.getSubtarget().getInstrInfo();
  const MachineFrameInfo &MFI = MF.getFrameInfo();
  const PRUFrameLowering *TFI = getFrameLowering(MF);
  const PRUSubtarget &STI = MF.getSubtarget<PRUSubtarget>();
  int FrameIndex = MI.getOperand(FIOperandNum).getIndex();
  int Offset;

  uint64_t stackSize = MF.getFrameInfo().getStackSize();
  int64_t spOffset = MF.getFrameInfo().getObjectOffset(FrameIndex);

  unsigned FrameReg;

  FrameReg = PRU::r2;

  Offset = spOffset + (int64_t)stackSize;
  Offset += MI.getOperand(FIOperandNum+1).getImm();
  
  MI.getOperand(FIOperandNum).ChangeToRegister(FrameReg, false);
  MI.getOperand(FIOperandNum+1).ChangeToImmediate(Offset);
  return false;
}

Register
PRURegisterInfo::getFrameRegister(MachineFunction const &MF) const {
const TargetFrameLowering *TFI = MF.getSubtarget().getFrameLowering();
return PRU::r2;
}

}